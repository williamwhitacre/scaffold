TODO

Change over the following during the transition from version 4 to version 5. Do not omit anything to
avoid exploding the semantic version number.


 - Replace all instances of (List String) in Scaffold.Resource with ResourcePath as an opaque type.
   Do it all at once, since it will (purely aesthetically) break the API each time this is done,
   resulting in a major change.
   - Remove depreciated stuff.
   - Ensure no remaining TODOs at time of publication.
   - Example 3 (Resources) should be fully working and demonstrable.


 DONE
 - Replace the Scaffold.Layout's usage of DEPRECIATED Elm Graphics.Element API with Html, as given
   in the examples, but of course wrapped up in the Scaffold.Layout semantics and layout engine.
   Do not be tempted to use Html.Lazy while doing this. A number of bugs were discovered in the
   diffing process, and Html.Lazy provides under the hood memoization imperatively, which is in and
   of itself dangerous and contradictory to the philosophy that spawned Elm to begin with in my
   humble opinion. It will not represent any performance issue to avoid Html.Lazy, given that we are
   already providing an optimization from the Scaffold.Resource module which makes it very easy to
   only recompute parts of the view output that *have* changed, such that the same memoization is
   achieved, but self contained within a pure Elm program which carries all of the stability
   guarantees of pure Elm code.
   - Replace all instances of the Graphics.Element type with VirtualDOM.Node.
   - Replace Graphics.Element.container with an Html construct that uses absolute positioning
     by means of the Html.Attributes.style and related function API, such that an exact visual
     equivalent is shown and an exact behavioral equivalent affects said visual equivalent.
        NOTE that this is an easy transition because of the fact that there are no other layout
        primitives involved in Scaffold.Layout other than Graphics.Element.container; it's already
        the case that all of the Layout operations are computed lazily atop metrics which are
        defined a priori using only the math primitives from the Elm language and translated to
        laid out elements only during the `flatten` family of operations.


  - Though not marked as such, we must consider the infix family of ProgramInput and ProgramOutput
    constructors and effectors depreciated at the time of this writing (9 Mar 2016). For that reason
    all such functions will be removed from Scaffold.App to complete the transition to semantic
    major version 5. An example would be the `withSequenceInputs` function. This should be
    superseded in all use cases by the equivalent but grammatically cleaner equivalent
    `defSequenceInputs` (read: ...define sequence inputs...), because of the general forward
    function application structure of the Scaffold modules.



This changeover should be completed by the end of the week (Friday, 11 Mar 2016). That will put us
on track to write the application code (probably not the prettiest layout ever) over the next week
easily with first stable and fully usable version of Scaffold.
